import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the sockMerchant function below.
    static int sockMerchant(int n, int[] ar) {
        //initialize numPairs
        int numPairs = 0;
        //HashMap Method
        HashMap<Integer, Integer>  pairs = new HashMap<Integer, Integer>();
        //For loop to seperate existing values and count how many exist.
        for(int i = 0; i< ar.length; i++) {
            if(!pairs.containsKey(ar[i]))
                pairs.putIfAbsent(ar[i], 1);
            else 
                pairs.replace(ar[i], pairs.get(ar[i])+1);
        }
        //Retrieve all the values of the keys in pairs
        //Divide by 2 in order to establish a pair
        for (int j : pairs.keySet())
            numPairs = (pairs.get(j)/2) + numPairs;
        //Return the number of pairs
        return numPairs;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] ar = new int[n];

        String[] arItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int arItem = Integer.parseInt(arItems[i]);
            ar[i] = arItem;
        }

        int result = sockMerchant(n, ar);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
